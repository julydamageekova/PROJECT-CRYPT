    #include <iostream>
    #include <string>
    #include <cstring>
    #include <sstream>
    #include <stdlib.h>
    #include<stdio.h>
    #include<time.h>
    #include<math.h>
    #include <bitset>
    #include <vector>
    #include <cstdlib>

    using namespace std;

    #define MAX 20
    #define BUCKET_LIMIT 1000000000
    #define BUCKET_NUM_DIGITS 9

    class BigInt{
        private:
            long long content[MAX];
            short sign;
            unsigned short length;

            void addLSBucket(int);

        public:
            BigInt ();
            BigInt (long long);
            BigInt (string,int);
            BigInt (const BigInt &n);

            BigInt operator = (BigInt);
            BigInt operator = (long long);

            bool operator == (BigInt);
            bool operator == (long long);
            bool operator != (BigInt);
            bool operator != (int);
            bool operator < (BigInt);
            bool operator < (int);
            bool operator <= (BigInt);
            bool operator <= (int);
            bool operator > (BigInt);
            bool operator > (int);
            bool operator >= (BigInt);
            bool operator >= (int);

            BigInt operator + (long long);
            BigInt operator + (BigInt);
            BigInt operator - (long long);
            BigInt operator - (BigInt);
            BigInt operator * (long long);
            BigInt operator * (BigInt);
            BigInt operator / (long long);
            BigInt operator / (BigInt);
            BigInt operator % (long long);
            BigInt operator % (BigInt);


            string toString(void);
            void debug(void);
    };

    BigInt :: BigInt ()	{
        length = 0;
        sign = 0;
        memset(content, 0, sizeof(content));
    }

    BigInt :: BigInt (long long n)	{
        length = 0;

        if (n == 0)	{
            sign = 0;
        }
        else	{
            sign = (n > 0) ? 1 : -1;
            if (n < 0)	n = 0 - n;		// Removing minus sign

            for (int i = 0; n > 0; n /= BUCKET_LIMIT)	{
                length ++;
                content[i ++] = n % BUCKET_LIMIT;
            }
        }
        memset(content + length, 0, (MAX - length) * sizeof(long long));
    }

    BigInt :: BigInt (string n, int size)	{
        length = 0;
            int i, posFirstDigit;
            stringstream s;

            if (n[0] == '-')	{
                sign = -1;
                posFirstDigit = 1;
            }
            else	{
                sign = 1;
                posFirstDigit = 0;
            }
            for (i = size - BUCKET_NUM_DIGITS; i >= posFirstDigit; i -= 9)	{

                s << n.substr(i, BUCKET_NUM_DIGITS);
                s >> content[length ++];
                s.clear();
            }
            if (i < posFirstDigit)	{
                s << n.substr(posFirstDigit, BUCKET_NUM_DIGITS - posFirstDigit + i);
                s >> content[length ++];
            }
            memset(content + length, 0, (MAX - length) * sizeof(long long));
    }

    BigInt :: BigInt (const BigInt &n)	{
        length = n.length;
        sign = n.sign;
        memcpy(content, n.content, MAX * sizeof(long long));
    }

    void BigInt :: addLSBucket (int numBucketsToBeAdded)	{

        if (length + numBucketsToBeAdded > MAX)	return;

        for (int i = length + numBucketsToBeAdded -1; i >= 0; i --)	{
            content[i] = (i > numBucketsToBeAdded - 1) ? content[i - numBucketsToBeAdded] : 0;
        }
        length += numBucketsToBeAdded;
    }

    string BigInt :: toString(void)	{
        if (length == 0)	return "0";

        stringstream s;

        if (sign == -1)	s << "-";

        s << content[length - 1];

        for (int i = length - 2; i >= 0; i --)	{
            if (content[i] < 10)	{
                s << "00000000" << content[i];
            }
            else if (content[i] < 100)	{
                s << "0000000" << content[i];
            }
            else if (content[i] < 1000)	{
                s << "000000" << content[i];
            }
            else if (content[i] < 10000)	{
                s << "00000" << content[i];
            }
            else if (content[i] < 100000)	{
                s << "0000" << content[i];
            }
            else if (content[i] < 1000000)	{
                s << "000" << content[i];
            }
            else if (content[i] < 10000000)	{
                s << "00" << content[i];
            }
            else if (content[i] < 100000000)	{
                s << "0" << content[i];
            }
            else	{
                s << content[i];
            }
        }
        return s.str();
    }

    BigInt BigInt :: operator = (BigInt n)	{
        sign = n.sign;
        length = n.length;
        memcpy(content, n.content, sizeof(content));
    }

    BigInt BigInt :: operator = (long long m)	{
        BigInt n(m);
        sign = n.sign;
        length = n.length;
        memcpy(content, n.content, sizeof(content));
    }

    bool BigInt :: operator == (long long n)	{
        BigInt k (n);
        if ((*this) == k)
            return true;
        else
            return false;
    }

    bool BigInt :: operator == (BigInt n)	{
            for (int i = 0; i < length; i ++)	{
                if (content[i] != n.content[i])	return false;
            }
            return true;
    }

    bool BigInt :: operator != (BigInt n)	{
        return !operator == (n);
    }

    bool BigInt :: operator != (int n)	{
        BigInt Y  (n);
        return !operator == (Y);
    }

    bool BigInt :: operator < (BigInt n)	{
        if (sign < n.sign)	{
            return true;
        }
        else if (sign > n.sign)	{
            return false;
        }
        else if (sign == 0)	{
            return false;
        }
        else if (sign == 1 && length < n.length)	{
            return true;
        }
        else if (sign == 1 && length > n.length)	{
            return false;
        }
        else if (sign == 1 && length == n.length)	{
            for (int i = 0; i < length; i ++)	{
                if (content[i] < n.content[i])	{
                    return true;
                }
                else if (content[i] > n.content[i])	{
                    return false;
                }
            }
            return false;
        }
        else if (sign == -1 && length < n.length)	{
            return false;
        }
        else if (sign == -1 && length > n.length)	{
            return true;
        }
        else if (sign == -1 && length == n.length)	{
            for (int i = 0; i < length; i ++)	{
                if (content[i] < n.content[i])	{
                    return false;
                }
                else if (content[i] > n.content[i])	{
                    return true;
                }
            }
            return false;
        }
    }

    bool BigInt :: operator < (int N)	{
        BigInt n(N);
        return (operator < (n) || operator == (n));
    }

    bool BigInt :: operator <= (BigInt n)	{
        return (operator < (n) || operator == (n));
    }

    bool BigInt :: operator > (int n)	{
        BigInt N(n);
        return !operator <= (N);
    }

    bool BigInt :: operator > (BigInt n)	{
        return !operator <= (n);
    }

    bool BigInt :: operator >= (BigInt n)	{
        return !operator < (n);
    }

    bool BigInt :: operator >= ( int n)	{
        BigInt N(n);
        return !operator < (N);
    }

    BigInt BigInt :: operator + (BigInt n)	{

        if (length == 0)	{
            return n;
        }
        else if (n.length == 0)	{
            BigInt num(*this);
            return num;
        }
        else if (sign == n.sign)	{
            BigInt num;
            num.length = (length > n.length) ? length : n.length;
            num.sign = sign;

            long long bucketSum, carry = 0;

            for (int i = 0; i < num.length; i ++)	{
                bucketSum = content[i] + n.content[i] + carry;
                num.content[i] = bucketSum % BUCKET_LIMIT;
                carry = bucketSum / BUCKET_LIMIT;
            }
            if (carry > 0)	{
                num.content[length ++] = carry;
            }
            return num;
        }
        else	{
            BigInt num;
            if (sign == -1)	{
                num = (*this);
                num.sign = 1;
                return n - num;
            }
            else	{
                num = n;
                num.sign = 1;
                return (*this) - num;
            }
        }
    }

    BigInt BigInt :: operator + (long long n)	{
        return (*this) + BigInt(n);
    }

    BigInt BigInt :: operator - (BigInt n)	{

        if (sign == n.sign)	{
            bool hasZeroValue = true;

            if (length == 0)	{
                BigInt subtrahend(n);
                subtrahend.sign *= -1;
            }
            else if (n.length == 0)	{
                BigInt num(*this);
                return num;
            }
            if (*this > n)	{
                BigInt minuend(*this);

                for (int i = 0; i < minuend.length; i ++)	{
                    if (minuend.content[i] >= n.content[i])	{
                        minuend.content[i] -= n.content[i];
                    }
                    else	{
                        minuend.content[i] = 10 * minuend.content[i] - n.content[i];
                        minuend.content[i + 1] --;
                    }
                    if (hasZeroValue && minuend.content[i] != 0)	hasZeroValue = false;
                }
                return hasZeroValue ? BigInt(0) : minuend;
            }
            else	{
                BigInt minuend(n);
                for (int i = 0; i < minuend.length; i ++)	{
                    if (minuend.content[i] >= content[i])	{
                        minuend.content[i] -= content[i];
                    }
                    else	{
                        minuend.content[i] = 10 * n.content[i] - content[i];
                        minuend.content[i + 1] --;
                    }
                    if (hasZeroValue && minuend.content[i] != 0)	hasZeroValue = false;
                }
                if (hasZeroValue)	{
                    return BigInt(0);
                }
                else	{
                    minuend.sign *= -1;
                    return minuend;
                }
            }
        }
        else	{
            BigInt subtrahend(n);
            if (n.sign = -1)	{
                subtrahend.sign = 1;
            }
            else	{
                subtrahend.sign = -1;
            }
            return operator + (subtrahend);
        }
    }

    BigInt BigInt :: operator - (long long n)	{
        return (*this) - BigInt(n);
    }

    BigInt BigInt :: operator * (long long n)	{
        if (n == 0 || length == 0)	return BigInt(0);

        long long carry = 0, tempProduct;
        BigInt num(*this);
        num.sign = ((n > 0 && sign == 1) || (n < 0 && sign == -1)) ? 1 : -1;

        for (int i = 0; i < length; i ++)	{
            tempProduct = num.content[i] * n;
            num.content[i] = (tempProduct + carry) % BUCKET_LIMIT;
            carry = (tempProduct + carry) / BUCKET_LIMIT;
        }

        if (carry > 0)	num.content[num.length ++] = carry;
        return num;
    }

    BigInt BigInt :: operator * (BigInt n)	{

        BigInt rs, temp;
        rs = n * content[0];

        for (int i = 1; i < length; i ++)	{
            temp = n * content[i];
            temp.addLSBucket(i);
            rs = rs + temp;
        }
        rs.sign = (sign == n.sign) ? 1 : -1;
        return rs;
    }

    BigInt BigInt :: operator % (long long n)	{
        if (n == 0 || length == 0)	return BigInt(0);

        long long carry = 0, tempProduct;
        BigInt num(*this);

        for (int i = 0; i < length; i ++)	{
            tempProduct = num.content[i] % n;
            num.content[i] = (tempProduct + carry) % BUCKET_LIMIT;
            carry = (tempProduct + carry) / BUCKET_LIMIT;
        }

        if (carry > 0)	num.content[num.length ++] = carry;
        return num;
    }

    BigInt BigInt :: operator % (BigInt n){
        BigInt rs, temp;
        BigInt num(*this);
        rs = num % n.content[0];
        for (int i = 1; i < length; i ++)	{
            temp = num % content[i];
            temp.addLSBucket(i);
            rs = rs - temp;
        }
        return rs;
    }

    BigInt BigInt :: operator / (long long n)	{
        if (n == 0 || length == 0)	return BigInt(0);

        long long carry = 0, tempProduct;
        BigInt num(*this);

        for (int i = 0; i < length; i ++)	{
            tempProduct = num.content[i] / n;
            num.content[i] = (tempProduct + carry) % BUCKET_LIMIT;
            carry = (tempProduct + carry) / BUCKET_LIMIT;
        }
        if (carry > 0)	num.content[num.length ++] = carry;
        return num;
    }

    BigInt BigInt :: operator / (BigInt n)	{
        BigInt rs, temp;
        BigInt num(*this);
        rs = num / n.content[0];
        for (int i = 1; i < length; i ++)	{
            temp = num / content[i];
            temp.addLSBucket(i);
            rs = rs - temp;
        }
        return rs;
    }

       BigInt fastdel (BigInt a, BigInt b){
            string test, chas;
            int y = 0;
            BigInt ost(0);
            while (y < a.toString().size()){
                test = ost.toString();

                BigInt A(test, ost.toString().size());
                ost = 0;
                while (A < b){
                        test = test + a.toString()[y];
                        y++;
                        BigInt temp(test, test.size());
                        A = temp;
                }
                chas = chas + (A/b).toString();
                ost = A % b;
            }
            BigInt Chas(chas, chas.size());
            return Chas;
        }


        BigInt fastdis (BigInt d, BigInt y, BigInt n){ //вспомогательная функция к следующей
            BigInt ar[(y.toString()).size()];
            int i = 0;
            while (y >= 10){ // поразрядное разложение BigInt-числа
                ar[i] = y % 10;
                y = y / 10;
                i++;
                }
            ar[i] = y % 10;
            i++;
            BigInt discharge [i];
            for(int j = 0; j < i; j++){
                char binar[j];
                binar[0] = '1';
                for(int k = 1; k <= j; k++)
                        binar[k]= '0';

                discharge[j] = (d * ar[j]) % n;
                BigInt ch(binar, j+1);
                ch = ch % n;
                if (j != 0){
                    BigInt cop = ch;
                    BigInt del = 2;
                    while(del*del < cop || ch != 1){
                        if (ch % del == 0)
                            while(ch % del == 0){
                                if(del < 1000 && d < 10000)
                                    discharge[j] = (discharge[j] * del) % n;
                                else
                                    discharge[j] = fastdis(discharge[j], del, n); //поразрядное умножение больших чисел
                                ch = ch / del;
                        }
                    del = del + 1;
                    }
                }
                else
                    discharge[j] = discharge[j] % n;
            }
            BigInt newnumb  = 0;
            for(int j = 0; j < i; j++)
                newnumb  = (newnumb  + discharge[j]) % n;
            return newnumb;
        }

        BigInt step (BigInt a, BigInt k, BigInt n){ //возведение в степень по модулю
            if (k == 0)
                return 1;
            else{
                if( k % 2 == 0){
                    BigInt d = step(a, k / 2, n);
                    BigInt temp = d, cop = d, i = 2, On(1);
                    if(i*i < cop || temp != On){
                        if (temp % i == 0) //разложение числа на простые делители
                            while(temp % i == 0){
                                if(i < 1000 && d < 10000)
                                    d = (d * i) % n;
                                else
                                    d = fastdis(d, i, n); //поразрядное умножение больших чисел
                                temp = temp / i;
                            }
                    i  = i + 1;
                    }
                d = fastdis (d,temp,n); // для последнего делителя
                return d;
                }
                else{
                    BigInt numb = step (a, k-1, n);
                    BigInt cop = numb, res = a, del = 2, On(1);

                    while(del*del < cop || numb != On){
                        if (numb % del== 0)
                            while(numb % del == 0){
                                if(del < 1000 && res < 10000)
                                    res = (res * del) % n;
                                else
                                    res = fastdis(res,del,n); //поразрядное умножение больших чисел
                                numb = numb / del;
                        }
                    del = del + 1;
                    }
                return res;
                }
            }
        }

        BigInt binpow (BigInt a, int n) { //бинарное возведение в степень BigInt - числа
            if (n == 0)
                return 1;
            if (n % 2 == 1)
                return binpow (a, n-1) * a;
            else{
                BigInt b = binpow (a, n/2);
                return b * b;
            }
        }

        BigInt extended_euclid(BigInt b,BigInt a){ //функция нахождения секретной экспоненты методом расширенного алгоритма Евклида
            BigInt y(0);
            BigInt n = a;
            if ((a + 1) % b == 0){
                y = (a + 1) / b;
                return y;
            }
            else{
                long long int sign = -1;
                BigInt x, q, r, x1(0), x2(1), y1(1), y2(0);
                while (b != 0){
                    q =a / b;
                    r = a - q * b;;
                    x = x2 +  q * x1 * sign ;
                    y = y2 +  y1 * q * sign;
                    a = b;
                    b = r;
                    x2 = x1;
                    x1 = x;
                    y2 = y1;
                    y1 = y;
                }
                y = y2;
            }
            if (y < 0)
                y = n - y;
            return y;
        }

        void CharToBool(char* ar, vector<bool> &a, int size){ //перевод символов в двоичный код
            int binary = 0, numb,i = 0;
            while (i < size){
                numb = ar[i];
                if  (numb < 0)
                    numb = numb + 256;
                for (int power = 7; power + 1; power-- ){
                    if( numb >= (1 << power) ){
                        numb -= (1 << power);
                        a.push_back(1);
                    }
                    else
                       a.push_back(0);
                }
                i++;
            }
        }

        BigInt binarytodec(bool* mass, int size){//перевод двоичного числа в BigInt - число
            BigInt res, two(2), C(0), ten(10);

             int k = 0, f = size - 1;
            for (int i = 0; i < size; i++){//подсчет количества нулей вначале двоичного числа
                if (mass[0] == false && i == 0){
                    while(mass [k] != true &&  k < size)
                         k++;
                i = k;
                }
                if(mass[i] == true){//перевод числа после нулей в десятичный вид
                    C = binpow(two, f - i);
                    res = res + C;
                }
            }

            if(k == size){ //если все число состоит из нулей, то вернется десятичное число такое что первый его разряд - количество нулей, а далеее кол-во 0 + 1
                 res = (binpow(ten, 3))*size;
                 return res;
            }

            int o = 0, h = 0; //кол-во чисел в числе
            o = (res.toString()).size();
            int how = o;

            int numb[o];
            numb[0] = how % 10;
            while(how >= 10){//запись количества знаков в полученном десятичном числе в массив
                h++;
                numb [h] = how/10;
                how /= 10;
            }
            h++;

            char zero[o+2]; //массив заполненный нулями
            zero[0] = 1;
            for(int i = 1; i < o + 2; i++)
                zero[i] = '0';


            char newnew[o + 2 + h]; //запись символов в один массив
            if(k != 0)
                newnew[0] = k + '0';
            else
                newnew[0] = '9';
            for(int i = h - 1, j = 1; i > 0, j <= h; i--, j++)
                newnew[j] = numb[i]+ '0';
            for(int i = h + 1,j = 1; i < o+2, j<o+2; i++,j++)
                newnew[i]= zero[j];

            BigInt N(newnew, o + 2 + h); //само число
            res = N + res;
            return res;
        }

        void intobool (int numb, vector<bool> &bulb){ //функция перевода int значениями не из таблицы ASCII (чтобы не переводить каждый раз)
            if (numb == 0){
                    bulb.push_back(0); bulb.push_back(0); bulb.push_back(0); bulb.push_back(0);
                }
            if (numb == 1){
                    bulb.push_back(0); bulb.push_back(0); bulb.push_back(0); bulb.push_back(1);
                }
            if (numb == 2) {
                    bulb.push_back(0); bulb.push_back(0); bulb.push_back(1); bulb.push_back(0);
                }
            if (numb == 3){
                    bulb.push_back(0); bulb.push_back(0); bulb.push_back(1); bulb.push_back(1);
                }
            if (numb == 4) {
                    bulb.push_back(0); bulb.push_back(1); bulb.push_back(0); bulb.push_back(0);
                }
            if (numb == 5) {
                    bulb.push_back(0); bulb.push_back(1); bulb.push_back(0); bulb.push_back(1);
                }
            if (numb==6) {
                    bulb.push_back(0); bulb.push_back(1); bulb.push_back(1); bulb.push_back(0);
                }
            if (numb==7) {
                    bulb.push_back(0); bulb.push_back(1); bulb.push_back(1); bulb.push_back(1);
                }
            if (numb==8){
                    bulb.push_back(1); bulb.push_back(0); bulb.push_back(0); bulb.push_back(0);
                }
            if (numb==9) {
                    bulb.push_back(1); bulb.push_back(0); bulb.push_back(0); bulb.push_back(1);
                }
            }

        int booltoint (bool x, bool y, bool z,bool a){ //функция обратная предыдущей
                int gty;
                if (x == 0)
                    if (y == 0)
                        if (z == 0)
                            if (a == 0)
                                gty = 0;
                            else
                                gty = 1;
                        else
                            if (a == 0)
                                gty = 2;
                            else
                                gty = 3;
                    else
                        if (z == 0)
                            if (a == 0)
                                gty = 4;
                            else
                                gty = 5;
                        else
                            if (a == 0)
                                gty = 6;
                            else
                                gty = 7;
                else
                    if (y == 0)
                        if (z == 0)
                            if (a == 0)
                                gty = 8;
                            else
                                gty = 9;
                return gty;
            }

        string chartosymbol(string MAIN){
            stringstream sstream(MAIN);
            string output;
            while(sstream.good()){
                bitset<8> bits;
                sstream >> bits;
                char c = char(bits.to_ulong());
                output += c;
            }
            return output;
        }

        string Encoder(BigInt e, BigInt n, char* ar){
            int size = strlen(ar) + 1; //подсчет количества символов в char-массиве без учета '/0'

            int s = size*8; //s - количество символов в бинарном массиве
            vector<bool> a(0); // бинарный массив

            CharToBool(ar, a, strlen(ar));
            srand(time(NULL));
            vector<int> everyone (0); // массив содержащий кол-во элементов  в каждой группе
            int kol = s; // переменная, определяющая сколько элементов осталось распределить
            int siz = 0;
            while(kol >= 4){ // цикл, определяющий количество элементов в группе
                if(kol >= 0){
                    everyone.push_back(2 + rand()% 5);
                    kol -= everyone[siz];
                }
                siz++;
            }
            BigInt A[siz];
            int z = 0;
            for (int siz = 0; siz < everyone.size(); siz++){
                    if(everyone[siz]!=0){
                    bool newmas[everyone [siz]];
                    for(int j = 0; j < everyone[siz]; j++){
                            if(a[j + z] == true)
                                newmas[j] = 1;
                            else
                                newmas[j] = 0;
                    }
                A[siz] = binarytodec(newmas, everyone[siz]);
                z += everyone[siz];
                }
            }
            cout << endl << " Encrypted message: "<< endl;
            int counter = 0;
            BigInt c;
            string main, ss; //строка содержащая зашифрованные числа и размер вначале
            for (int i = 0; i < siz; i++){  //шифровка
                c = step (A[i], e,n);
                if(c != 0){
                    BigInt NN((c.toString()).size());
                    ss = NN.toString() + c.toString();
                    main = main + ss;
                }
            }
            int numb = main.size();//размер строки
            vector <bool> bulb(0);
            int v = 0;
            while(numb > 0){//рандомное распределение флагов
                int h;
                if(numb > 9)
                        h = 1 + rand() %9;
                    else
                        h = 1 + rand() % numb;
                    int binar[h];
                    binar[0] = h;
                    intobool(binar[0], bulb);
                    for (int i = 1 ; i < h + 1; i++){
                        binar[i]= main[i + v - 1]- '0';
                        intobool(binar[i], bulb);
                    }
                numb = numb - h;
                v = v + h;
            }
            string MAIN;
            char schifr [bulb.size()];

            for(int i = 0; i < bulb.size(); i++){
                if (bulb[i] == 0)
                    schifr[i] = '0';
                else
                    schifr[i] = '1';
                MAIN = MAIN + schifr[i];
            }
            string h = chartosymbol(MAIN);
            cout << endl << endl;
            return h;
        }

        string Decoder(string input, BigInt x, BigInt n){
        cout << endl << " Decrypted message: "<< endl;

        cout << endl << " Please, wait a bit ..." << endl << endl;

        char alpha[input.size()];

        for(int i = 0; i < input.size(); i++)
            alpha[i] = input[i];

        vector <bool> bulb (0);
        CharToBool(alpha, bulb, input.size());

        for(int i = 0 ;i < bulb.size();i++)
            if (bulb[i]!=0 && bulb[i]!= 1)
                bulb.insert(bulb.begin()+i);

        vector <int> sdf(0);//десятичный массив
        int i = 0;
        while (i < bulb.size()){
            int k = booltoint(bulb[i], bulb[i+1], bulb[i+2], bulb[i+3]);
            i = i + 4;
            sdf.push_back(k);
        }   //перевод из бинарного вида в десятичный

        int flag = sdf[0];
        int j = 0;
        j = j + flag + 1;
        flag = sdf[j];
        sdf.erase(sdf.begin()+ j);

        while(j + flag < sdf.size()){ //удаление элементов-флагов
            j = j + flag;
            if(j == sdf.size())
                break;
            else{
                flag = sdf[j];
                sdf.erase(sdf.begin()+ j);
            }
        }
        sdf.erase(sdf.begin()+0);

        vector <int> fflag(0);
        flag = sdf[0];
        fflag.push_back(flag);
        j = 0;
        j = j + flag + 1;
        flag = sdf[j];
        sdf.erase(sdf.begin()+ j);
        vector <BigInt> Dec(0);

        while(j + flag < sdf.size()&&flag!= NULL){ //удаление элементов-флагов
            j = j + flag;
            fflag.push_back(flag);
            if(j == sdf.size())
                break;
            else{
                flag = sdf[j];
                sdf.erase(sdf.begin()+ j);
            }
        }
        fflag.push_back(flag);
        sdf.erase(sdf.begin());
        int sum = 0;
        int k = 0;
        for(int i = 0; i < fflag.size(); i++){
            if(fflag[i] != NULL){
                char every[fflag[k]];
                for(int j = 0; j <= fflag[i]; j++)
                    every[j] = sdf[sum+j] + '0';
                BigInt temp(every, fflag[i]);
                Dec.push_back(temp);
                sum = sum + fflag[i];
                k++;
            }
        }
        string maimamim;
        BigInt c;
        for (int aqwe = 0; aqwe < k; aqwe++){ //дешифровка
            c = step (Dec[aqwe], x, n);
            int s = c.toString()[0]-'0';
            string newnewnnw;
            BigInt g(0);
            int j = 0;
            if(c.toString()[0] != '9')
                for(j = 0; j < c.toString()[0]-'0' ; j++)
                    newnewnnw[j]= '0';
            else
                j = 0;
            int ert = 0;
            for (int  y = (c.toString()).size() - 1; y >= 3; y--){
                BigInt temp =(c.toString()[y]-'0')*pow(10,ert);
                g = g + temp;
                ert++;
            }
            BigInt temp2 = g;
            int kol = j;
            if(g > 0){
                if(g > 1){
                    while(temp2 >= 1){
                        temp2 = temp2 / 2;
                        kol++;
                    }
                }
            else{
                newnewnnw[j]='1';
                kol++;
                }
            }
            int AAAA = kol;
            while(kol > j){
                if (g % 2 == 0){
                    newnewnnw[kol-1] = '0';
                    g = g / 2;
                    kol--;
                }
                else{
                    newnewnnw [kol-1] = '1';
                    g = g / 2;
                    kol--;
                }
            }
            int uy = 0;
            while(uy < AAAA){
                maimamim = maimamim + newnewnnw[uy];
                uy++;
            }
        }
        maimamim = chartosymbol(maimamim);
        i = 0;
        char arrrr[9];
        while (maimamim[i]<='9'&& maimamim[i]>='0'){
            arrrr[i] = maimamim[i];
            i++;
        }
        int lenght = atoi(arrrr);
        maimamim = maimamim.substr(i, lenght);
        return maimamim;
    }


    void KeyGeneration(BigInt& e, BigInt& x, BigInt& n){

       string ip, iq, ie;
        cout << "Enter p,q ";
        cin >> ip >> ;
        BigInt p(ip, ip.size()iq),q(iq, iq.size());
        n = p * q;
        BigInt func = (p-1) * (q-1);
        cout << "Enter public exponent " << '1' << " < e < " << func.toString();
        cin >> ie;
        BigInt temp(ie, ie.size());
        e = temp;
        x = extended_euclid(e,func);
     }




        int main(){
            int ss;
            cout << " Enter number of symbols: ";
            cin >> ss;
            char ar[ss];
            cout << " Enter text (first symbols - number of them): ";
            cin >> ar;
            cout << endl << endl;
            BigInt e, x, n;
            KeyGeneration(e, x, n);

            cout << endl << "Public key {" << e.toString() << "," << n.toString() << "}" << endl;
            cout << "Private key {" << x.toString() << "," << n.toString() << "}" << endl << endl;

            string input = Encoder(e, n, ar);
            cout << input << endl;
            bool t;
            cout << " Would you like to decrypt? (y-1, n-0) "
            cin >> t;
            if(t){
                string output = Decoder (input, x, n);
                cout << output << endl;
           }
            cout << endl << " Have a nice day! ";
            return 0;
        }
